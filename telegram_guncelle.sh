#!/bin/bash

# --- AYARLAR ---
# Betiklerin ve yapÄ±landÄ±rma dosyalarÄ±nÄ±n yollarÄ±
MIS_SCRIPT_PATH="./mis"
GITHUB_REPO_ROOT="." # Betiklerin ve modules.json'Ä±n bulunduÄŸu ana dizin
MODULES_JSON_FILE="$GITHUB_REPO_ROOT/modules.json"

# mis betiÄŸinin kullanacaÄŸÄ± yapÄ±landÄ±rma ve Ã¶nbellek yollarÄ±
MIS_CONFIG_DIR="$HOME/.config/ksu-manager"
MIS_MODULES_FILE_TARGET="$MIS_CONFIG_DIR/modules.json"
MIS_CACHE_DIR="$HOME/.cache/ksu-manager"
MIS_CACHE_MANIFEST="$MIS_CACHE_DIR/manifest.json"

# Telegram ve durum takibi iÃ§in ayarlar
TELEGRAM_BOT_TOKEN="${TELEGRAM_BOT_TOKEN}"
CHANNEL_ID="${TELEGRAM_CHANNEL_ID}"
TELEGRAM_DURUM_DOSYASI="$GITHUB_REPO_ROOT/telegram_durum.txt"
LAST_RUN_FILE="$GITHUB_REPO_ROOT/last_run.txt"

# --- GÃœVENLÄ°K KONTROLLERÄ° ---
if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$CHANNEL_ID" ]; then
    echo "[HATA] TELEGRAM_BOT_TOKEN veya CHANNEL_ID ortam deÄŸiÅŸkenleri ayarlanmamÄ±ÅŸ." >&2
    exit 1
fi
if [ -n "$GIT_API_TOKEN" ]; then
    export GITHUB_TOKEN="$GIT_API_TOKEN"
fi

# --- Ä°YÄ°LEÅžTÄ°RME: MANUEL Ã‡ALIÅžTIRMA KONTROLÃœ ---
# 1. AdÄ±m: GÃ¼nlÃ¼k Ã§alÄ±ÅŸtÄ±rma kontrolÃ¼
# Bu kontrol artÄ±k sadece zamanlanmÄ±ÅŸ gÃ¶revlerde (schedule) Ã§alÄ±ÅŸacak.
# Manuel tetiklemeler (workflow_dispatch) bu kontrolden etkilenmeyecek.
TODAY=$(date +%Y-%m-%d)
TRIGGER_TYPE=$1 # Workflow'dan gelen argÃ¼man (schedule, workflow_dispatch, vb.)

if [ "$TRIGGER_TYPE" == "schedule" ]; then
    if [ -f "$LAST_RUN_FILE" ] && [ "$(cat "$LAST_RUN_FILE")" == "$TODAY" ]; then
        echo "[BÄ°LGÄ°] Otomasyon bugÃ¼n ($TODAY) zaten Ã§alÄ±ÅŸtÄ±rÄ±lmÄ±ÅŸ. ZamanlanmÄ±ÅŸ gÃ¶rev atlanÄ±yor."
        exit 0
    fi
fi
# --- Ä°YÄ°LEÅžTÄ°RME SONU ---

# Gerekli dosya ve programlarÄ±n kontrolÃ¼
if ! command -v jq &> /dev/null; then echo "[HATA] 'jq' komutu bulunamadÄ±." >&2; exit 1; fi
if [ ! -f "$MODULES_JSON_FILE" ]; then echo "[HATA] Depoda 'modules.json' dosyasÄ± bulunamadÄ±: $MODULES_JSON_FILE" >&2; exit 1; fi
touch "$TELEGRAM_DURUM_DOSYASI" # Dosya yoksa oluÅŸtur

echo "-------------------------------------"
echo "Otomasyon BaÅŸlatÄ±ldÄ±: $(date)"
echo "[BÄ°LGÄ°] Tetiklenme tÃ¼rÃ¼: ${TRIGGER_TYPE:-Manuel/Bilinmiyor}"

# mis betiÄŸinin Ã§alÄ±ÅŸmasÄ± iÃ§in ortamÄ± hazÄ±rla
echo "[BÄ°LGÄ°] Depodaki 'modules.json' dosyasÄ± kopyalanÄ±yor..."
mkdir -p "$MIS_CONFIG_DIR"
cp "$MODULES_JSON_FILE" "$MIS_MODULES_FILE_TARGET"

# 2. AdÄ±m: mis sync ile tÃ¼m aktif modÃ¼lleri kontrol et ve gÃ¼ncellemeleri indir
echo "[BÄ°LGÄ°] 'mis sync' Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor... Bu iÅŸlem tÃ¼m gÃ¼ncellemeleri Ã¶nbelleÄŸe indirecektir."
bash "$MIS_SCRIPT_PATH" sync

echo "[BÄ°LGÄ°] 'mis sync' tamamlandÄ±. Telegram durumu kontrol ediliyor."

# 3. AdÄ±m: Aktif modÃ¼lleri al ve her birini Telegram durumuyla karÅŸÄ±laÅŸtÄ±r
jq -r '.modules[] | select(.enabled == true) | .name' "$MODULES_JSON_FILE" | while read -r modul_adi; do
    echo "---"
    echo "[Ä°ÅžLEM] ModÃ¼l kontrol ediliyor: $modul_adi"

    guncel_dosya_adi=$(jq -r --arg mod "$modul_adi" '.[$mod] // ""' "$MIS_CACHE_MANIFEST")

    if [ -z "$guncel_dosya_adi" ]; then
        echo "[UYARI] '$modul_adi' iÃ§in manifest dosyasÄ±nda bir kayÄ±t bulunamadÄ±. AtlanÄ±yor."
        continue
    fi
    
    eski_kayit=$(grep "^$modul_adi;" "$TELEGRAM_DURUM_DOSYASI")
    eski_mesaj_id=$(echo "$eski_kayit" | cut -d';' -f2)
    eski_dosya_adi=$(echo "$eski_kayit" | cut -d';' -f3)

    if [ "$guncel_dosya_adi" == "$eski_dosya_adi" ]; then
        echo "[BÄ°LGÄ°] '$modul_adi' Telegram'da zaten gÃ¼ncel. Ä°ÅŸlem yapÄ±lmadÄ±."
        continue
    fi

    echo "[GÃœNCELLEME] '$modul_adi' iÃ§in yeni sÃ¼rÃ¼m bulundu: $guncel_dosya_adi"
    
    guncel_dosya_yolu="$MIS_CACHE_DIR/$guncel_dosya_adi"
    if [ ! -f "$guncel_dosya_yolu" ]; then
        echo "[HATA] Dosya Ã¶nbellekte bulunamadÄ±: $guncel_dosya_yolu. AtlanÄ±yor."
        continue
    fi

    if [ ! -z "$eski_mesaj_id" ]; then
        echo "[TELEGRAM] Eski mesaj siliniyor (ID: $eski_mesaj_id)..."
        curl -s "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/deleteMessage?chat_id=$CHANNEL_ID&message_id=$eski_mesaj_id" > /dev/null
    fi

    # Telegram aÃ§Ä±klamasÄ± iÃ§in linkleri hazÄ±rla
    module_info=$(jq -r --arg name "$modul_adi" '.modules[] | select(.name == $name) | .source + ";" + .type' "$MODULES_JSON_FILE")
    source_repo=$(echo "$module_info" | cut -d';' -f1)
    source_type=$(echo "$module_info" | cut -d';' -f2)
    
    repo_url=""
    changelog_url=""

    if [[ "$source_type" == "github_release" || "$source_type" == "github_ci" ]]; then
        repo_url="https://github.com/$source_repo"
        changelog_url="https://github.com/$source_repo/releases/latest"
    elif [[ "$source_type" == "gitlab_release" ]]; then
        repo_url="https://gitlab.com/$source_repo"
        changelog_url="https://gitlab.com/$source_repo/-/releases"
    fi

    caption="<b>ModÃ¼l:</b> <code>$guncel_dosya_adi</code>"
    if [ ! -z "$repo_url" ]; then
        caption+="\n\n<a href=\"$repo_url\">ðŸ“¦ Kaynak Kod</a>"
    fi
    if [ ! -z "$changelog_url" ]; then
        caption+="\n<a href=\"$changelog_url\">ðŸ“œ DeÄŸiÅŸiklikler</a>"
    fi

    echo "[TELEGRAM] Yeni dosya '$guncel_dosya_adi' kanala sessizce yÃ¼kleniyor..."
    API_YANITI=$(curl -s -F document=@"$guncel_dosya_yolu" \
                     -F caption="$caption" \
                     -F parse_mode="HTML" \
                     "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument?chat_id=$CHANNEL_ID&disable_notification=true")

    yeni_mesaj_id=$(echo "$API_YANITI" | jq -r '.result.message_id')

    if [ ! -z "$yeni_mesaj_id" ] && [ "$yeni_mesaj_id" != "null" ]; then
        if [ ! -z "$eski_kayit" ]; then
            sed -i "/^$modul_adi;/d" "$TELEGRAM_DURUM_DOSYASI"
        fi
        echo "$modul_adi;$yeni_mesaj_id;$guncel_dosya_adi" >> "$TELEGRAM_DURUM_DOSYASI"
        echo "[BAÅžARILI] '$modul_adi' gÃ¼ncellendi. Yeni Mesaj ID: $yeni_mesaj_id"
    else
        echo "[HATA] Telegram'a yÃ¼klenemedi. API YanÄ±tÄ±: $API_YANITI"
    fi
done

# Son Ã§alÄ±ÅŸtÄ±rma tarihini kaydet
echo "$TODAY" > "$LAST_RUN_FILE"

echo "-------------------------------------"
echo "Otomasyon TamamlandÄ±: $(date)"
echo

